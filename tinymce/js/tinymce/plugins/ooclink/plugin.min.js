/**
 * plugin.js
 *
 * Released under LGPL License.
 * Copyright (c) 1999-2015 Ephox Corp. All rights reserved
 *
 * License: http://www.tinymce.com/license
 * Contributing: http://www.tinymce.com/contributing
 */

/*global tinymce:true */





tinymce.PluginManager.add('ooclink', function(editor) {
	function createLinkList(callback) {
		return function() {
		    //console.log('In Here');
			var linkList = editor.settings.link_list;
            //console.log(linkList);
			if (typeof linkList == "string") {
	
				tinymce.util.XHR.send({
					url: linkList,
					success: function(text) {
						callback(tinymce.util.JSON.parse(text));
					}
				});
			} else if (typeof linkList == "function") {
				linkList(callback);
			} else {
			    //console.log('Must be undefined');
				callback(linkList);
			}
		};
	}

	function buildListItems(inputList, itemCallback, startItems) {
		function appendItems(values, output) {
			output = output || [];

			tinymce.each(values, function(item) {
				var menuItem = {text: item.text || item.title};

				if (item.menu) {
					menuItem.menu = appendItems(item.menu);
				} else {
					menuItem.value = item.value;

					if (itemCallback) {
						itemCallback(menuItem);
					}
				}

				output.push(menuItem);
			});

			return output;
		}

		return appendItems(inputList, startItems || []);
	}

	function showDialog(linkList) {
		var data = {}, selection = editor.selection, dom = editor.dom, selectedElm, anchorElm, initialText;
		var win, onlyText, textListCtrl, linkListCtrl, relListCtrl, targetListCtrl, classListCtrl, value;

		function linkListChangeHandler(e) {
			var textCtrl = win.find('#text');

			if (!textCtrl.value() || (e.lastControl && textCtrl.value() == e.lastControl.text())) {
				textCtrl.value(e.control.text());
			}

			win.find('#href').value(e.control.value());
		}

		function buildAnchorListControl(url) {
			var anchorList = [];

			tinymce.each(editor.dom.select('a:not([href])'), function(anchor) {
				var id = anchor.name || anchor.id;

				if (id) {
					anchorList.push({
						text: id,
						value: '#' + id,
						selected: url.indexOf('#' + id) != -1
					});
				}
			});

			if (anchorList.length) {
				anchorList.unshift({text: 'None', value: ''});

				return {
					name: 'anchor',
					type: 'listbox',
					label: 'Anchors',
					values: anchorList,
					onselect: linkListChangeHandler
				};
			}
		}

		function updateText() {
			if (!initialText && data.text.length === 0 && onlyText) {
				this.parent().parent().find('#text')[0].value(this.value());
			}
		}

		function urlChange(e) {
			var meta = e.meta || {};

			if (linkListCtrl) {
				linkListCtrl.value(editor.convertURL(this.value(), 'href'));
			}

			tinymce.each(e.meta, function(value, key) {
				win.find('#' + key).value(value);
			});

			//if (!meta.text) {
			//	updateText.call(this);
			//}
		}

		function isOnlyTextSelected(anchorElm) {
			var html = selection.getContent();

			// Partial html and not a fully selected anchor element
			if (/</.test(html) && (!/^<a [^>]+>[^<]+<\/a>$/.test(html) || html.indexOf('href=') == -1)) {
				return false;
			}

			if (anchorElm) {
				var nodes = anchorElm.childNodes, i;

				if (nodes.length === 0) {
					return false;
				}

				for (i = nodes.length - 1; i >= 0; i--) {
					if (nodes[i].nodeType != 3) {
						return false;
					}
				}
			}

			return true;
		}

		selectedElm = selection.getNode();
		anchorElm = dom.getParent(selectedElm, 'a[href]');
		onlyText = isOnlyTextSelected();

		data.text = initialText = anchorElm ? (anchorElm.innerText || anchorElm.textContent) : selection.getContent({format: 'text'});
		data.href = anchorElm ? dom.getAttrib(anchorElm, 'href') : '';

/*		if (anchorElm) {
			data.target = dom.getAttrib(anchorElm, 'target');
		} else if (editor.settings.default_link_target) {
			data.target = editor.settings.default_link_target;
		}  */

		if ((value = dom.getAttrib(anchorElm, 'rel'))) {
			data.rel = value;
		}

		if ((value = dom.getAttrib(anchorElm, 'class'))) {
			data['class'] = value;
		}

/*		if ((value = dom.getAttrib(anchorElm, 'title'))) {
			data.title = value;
		} */

		if (onlyText) {
			textListCtrl = {
				name: 'text',
				multiline: true,
				type: 'textbox',
				size: 40,
				label: 'Title',
				onchange: function() {
					data.text = this.value();
				} 
			};
		} 
		
		
		
	   if (onlyText) {
			textCtrlJSMol = {
				name: 'jsmol_script',
				multiline: true,
				type: 'textbox',
				size: 40,
				tooltip: '(e.g. wireframe;)'
				//label: 'JSMol Script'
			};
		} 
		
		

		if (linkList) {
			linkListCtrl = {
				type: 'listbox',
				label: 'Link list',
				values: buildListItems(
					linkList,
					function(item) {
						item.value = editor.convertURL(item.value || item.url, 'href');
					},
					[{text: 'None', value: ''}]
				),
				onselect: linkListChangeHandler,
				value: editor.convertURL(data.href, 'href'),
				onPostRender: function() {
					/*eslint consistent-this:0*/
					linkListCtrl = this;
				}
			};
		}
		
		
		cdcontainer = {
          type: 'container',
          label  : 'CD Options',
          layout: 'flow',
          items: [
            {type: 'label', text: 'A container'},
            {type: 'textbox', label: 'textbox', value: 'with a textbox'},
            {type: 'label', text: 'and two labels'},]
		}
		
		
		
		/*

		if (editor.settings.target_list !== false) {
			if (!editor.settings.target_list) {
				editor.settings.target_list = [
					{text: 'None', value: ''},
					{text: 'New window', value: '_blank'}
				];
			}

			targetListCtrl = {
				name: 'target',
				type: 'listbox',
				label: 'Target',
				values: buildListItems(editor.settings.target_list)
			};
		} */

		if (editor.settings.rel_list) {
			relListCtrl = {
				name: 'rel',
				type: 'listbox',
				label: 'Rel',
				values: buildListItems(editor.settings.rel_list)
			};
		}

		if (editor.settings.link_class_list) {
			classListCtrl = {
				name: 'class',
				type: 'listbox',
				label: 'Class',
				values: buildListItems(
					editor.settings.link_class_list,
					function(item) {
						if (item.value) {
							item.textStyle = function() {
								return editor.formatter.getCssText({inline: 'a', classes: [item.value]});
							};
						}
					}
				)
			};
		}


		if (editor.settings.link_title !== false) {
			linkTitleCtrl = {
				name: 'nmr',
				type: 'CheckBox',
				label: 'NMR',
				value: data.title
			};
		} 
		
		if (editor.settings.link_title !== false) {
			seekerCtrl = {
				name: 'seeker',
				type: 'CheckBox',
				label: 'Seeker',
				onclick: function(v) {
				    var perspectChk = win.find('#perspective');
				perspectChk.checked(false);

				}
			};
		} 
		
		if (editor.settings.link_title !== false) {
			perspectiveCtrl = {
				name: 'perspective',
				type: 'CheckBox',
				label: 'Perspective',
				onclick: function(v) {
				    var seekerChk = win.find('#seeker');
				 seekerChk.checked(false);
				 
				}
			};
		}
		
		
		if (editor.settings.link_title !== false) {
			listOptions = {
				name: 'type',
				type: 'listbox',
				label: 'Type',
				 values: [
                    { text: 'JSMol Structure (xyz/mol/pdb)', value: 'jsmol' }
                   // { text: 'Chemdoodle Spectrum (jdx)', value: 'chemdoodle' }
                ],
                
                onselect: function(v) {
                // Insert content when the window form is submitted

                  var jsmolscript = win.find('#jsmol_script');
                  if (this.value() == 'chemdoodle') {
                  
                  //console.log(this);
                  jsmolscript.disabled(true);
                  //jsmolscript.hide();
                  
                  
                  } else {
                  
                  
                  jsmolscript.disabled(false);
          
                  //jsmolscript.show();
                  }
                  
               
                  
                }
			};
		}
		
		
		 

		win = editor.windowManager.open({
			title: 'Insert JSMOL or Spectra',
			data: data,
			body: [
			    listOptions,
			    //textListCtrl,
				{
					name: 'href',
					type: 'filepicker',
					filetype: 'file',
					size: 40,
					autofocus: true,
					label: 'Url',
					onchange: urlChange
					//onkeyup: updateText
				},
				{type: 'label', text: 'JSmol script'},
				textCtrlJSMol,
				//{type: 'label', text: 'Chemdoodle Spectra Options'},
				//linkTitleCtrl,
				//perspectiveCtrl,
				//seekerCtrl

			],
			onSubmit: function(e) {
				/*eslint dot-notation: 0*/
				var href;

				data = tinymce.extend(data, e.data);
				href = data.href;

				// Delay confirm since onSubmit will move focus
				function delayedConfirm(message, callback) {
					var rng = editor.selection.getRng();

					window.setTimeout(function() {
						editor.windowManager.confirm(message, function(state) {
							editor.selection.setRng(rng);
							callback(state);
						});
					}, 0);
				}

				function insertLink() {
					var linkAttrs = {
						href: href,
						target: data.target ? data.target : null,
						rel: data.rel ? data.rel : null,
						"class": data["class"] ? data["class"] : null,
						title: data.title ? data.title : null
					};
					
					//console.log(anchorElm);

					if (anchorElm) {
						editor.focus();

						if (onlyText && data.text != initialText) {
							if ("innerText" in anchorElm) {
								anchorElm.innerText = data.text;
							} else {
								anchorElm.textContent = data.text;
							}
						}

						dom.setAttribs(anchorElm, linkAttrs);

						selection.select(anchorElm);
						editor.undoManager.add();
					} else {
					    //console.log(onlyText);
						if (onlyText) {
						
						//console.log(data);
						    
						var uniqueid = new Date().getTime();
						if(data.type == 'jsmol') {
						var newcontent = '<div><script type="text/javascript" src="/jmol/jsmol/JSmol.min.js"></script>' + 
                                    //'<script type="text/javascript" src="/tsugi/mod/openochem/js/jquery-3.1.1.min.js"></script>' +
                                    '<script type="text/javascript">' +
                                    '$(document).ready(function() {delete Jmol._tracker; ' +
                                    ' Info = { '+
                                    '          width: 400, '+
                                    '          height: 300, '+
                                    '          j2sPath: "/jmol/jsmol/j2s", '+
                                  //  '          jarPath: "/jmol/jsmol/java", '+
                                    '          use: "HTML5", '+
                                    '          script: "load \''+linkAttrs.href+'\'; '+data.jsmol_script+'"}, '+
                                    '$("#mydiv'+uniqueid+'").html(Jmol.getAppletHtml("jmolApplet'+uniqueid+'",Info));'+
                                    '}); '+
                                    '</script> '+
                                    '<span class="mceNonEditable" id="mydiv'+uniqueid+'">JSMOl Object</span></div>';
                         } else if (data.type == 'chemdoodle') {
                         
                         
                                    if(data.seeker == true) {
                                    var canvastype = 'var spectrumcanvas = new ChemDoodle.SeekerCanvas(\'seekerPointer\', 500, 200, ChemDoodle.SeekerCanvas.SEEK_POINTER);';
                                    } else {
                                    var canvastype = 'var spectrumcanvas = new ChemDoodle.PerspectiveCanvas(\'spectrumcanvas\', 500, 200);';
                                    }
                                    
                                    
                                    if(data.nmr == true) {
                                    var nmr = 'spectrumcanvas.specs.plots_flipXAxis = true;';
                                    } else {
                                    var nmr = '';
                                    }
                                    
                         var newcontent = '<div class="well well-sm"><h3>'+data.text+'</h3><link rel="stylesheet" href="/chemdoodle/ChemDoodleWeb.css" type="text/css" />'+
                                '<script type="text/javascript" src="js/jquery-3.1.1.min.js"></script>'+
                                '<script src="chemdoodle/ChemDoodleWeb.js" type="text/javascript"></script>'+
                                '<script>'+
                                canvastype +
                                '        spectrumcanvas.specs.plots_showYAxis = false;'+
                                nmr +
                                '        spectrumcanvas.specs.backgroundColor = \'#FFFBC9\';'+       
                                '        $(document).ready(function(){'+
                                '            $.ajax({'+
                                '                  url: \'ajax/getspectrum.php\','+
                                '                  type: \'POST\','+
                                '                  cache: false,'+
                                '                  data: {url: \''+linkAttrs.href+'\'},'+
                                '                  success: function(data){'+
                                '                      var spectrumJcampFile = data;'+
                                '                      var spectrum = ChemDoodle.readJCAMP(spectrumJcampFile);'+
                                '                      spectrumcanvas.loadSpectrum(spectrum);'+
                                '                  },'+
                                '                  error: function(e){'+
                                '                  alert(e);'+
                                '                  }'+
                                '              });'+
                                '          });'+
                                '</script></div>';
    
                                    
                              }
                                    
                                    
                                    
                                    
                                    
                                    
						    
						   // var newcontent = "<script>alert('hello');</script>";
						    
		
						
							//editor.insertContent(dom.createHTML('a', linkAttrs, dom.encode(data.text)));
							//console.log(data.text);
							//console.log(linkAttrs);
							editor.insertContent(newcontent);
						} else {
						
						    //console.log(linkAttrs);
							editor.execCommand('mceInsertLink', false, linkAttrs);
						}
					}
				}



				if (!href) {
					editor.execCommand('unlink');
					return;
				}




				// Is email and not //user@domain.com
				if (href.indexOf('@') > 0 && href.indexOf('//') == -1 && href.indexOf('mailto:') == -1) {
					delayedConfirm(
						'The URL you entered seems to be an email address. Do you want to add the required mailto: prefix?',
						function(state) {
							if (state) {
								href = 'mailto:' + href;
							}

							insertLink();
						}
					);

					return;
				}

				// Is not protocol prefixed
/*				if ((editor.settings.link_assume_external_targets && !/^\w+:/i.test(href)) ||
					(!editor.settings.link_assume_external_targets && /^\s*www[\.|\d\.]/i.test(href))) {
					delayedConfirm(
						'The URL you entered seems to be an external link. Do you want to add the required http:// prefix?',
						function(state) {
							if (state) {
								href = 'http://' + href;
							}

							insertLink();
						}
					);

					return;
				}  */

				insertLink();
			}
		});
	}






	editor.addButton('ooclink', {
	
	    text: '3D',
        icon: false,
		tooltip: 'Insert 3D structure (JSMol)',
		shortcut: 'Meta+K',
		onclick: createLinkList(showDialog),
		stateSelector: 'div[class=jsmoldiv]'
	});
/*
	editor.addButton('unlink', {
		icon: 'unlink',
		tooltip: 'Remove link',
		cmd: 'unlink',
		stateSelector: 'a[href]'
	});
*/
	//editor.addShortcut('Meta+K', '', createLinkList(showDialog));
	//editor.addCommand('mceLink', createLinkList(showDialog));

	this.showDialog = showDialog;

	editor.addMenuItem('ooclink', {
		icon: 'link',
		text: 'Insert/edit 3D Structure/Spectra',
		shortcut: 'Meta+K',
		onclick: createLinkList(showDialog),
		stateSelector: 'div',
		context: 'insert',
		prependToContext: true
	});
});
